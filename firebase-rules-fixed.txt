rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // User Profiles - Users can read all profiles but only edit their own, except for points/stats
    match /profiles/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Allow updates for profile owner or for points/stats system
      allow update: if request.auth != null && (
        request.auth.uid == userId ||
        isPointsOrStatsUpdate() ||
        isAdmin()
      );
    }
    
    // Helper function to check if update is just points/stats
    function isPointsOrStatsUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['points', 'level', 'stats']);
    }
    
    // Social Posts - Allow likes and comments by anyone, full edit by owner only
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow delete: if request.auth != null && (request.auth.uid == resource.data.uid || isAdmin());
      // Simplified update rule - owner can update everything, others can update likes/comments
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.uid ||
        isLikeOrCommentUpdate() ||
        isAdmin()
      );
    }
    
    // Helper function to check if update is just likes/comments
    function isLikeOrCommentUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likesCount', 'commentsCount']);
    }
    
    // Comments - Authenticated users can read all, write their own
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.uid || isAdmin());
    }
    
    // Support Groups - Read-only public data
    match /supportGroups/{groupId} {
      allow read: if request.auth != null;
      allow write: if false; // Managed by admin only
    }
    
    // Group Messages - Read all in group, write your own
    match /groupMessages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
    }
    
    // Chat Messages - Read all in chat, write your own, allow heart reactions
    match /chatMessages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.uid;
      // Allow updates for heart reactions
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.uid ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['heartReactions'])
      );
    }
    
    // Chat Reactions - Read all, write your own
    match /chatReactions/{reactionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
    }
    
    // User Presence - Read all, write your own
    match /userPresence/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // üßò‚Äç‚ôÄÔ∏è MEDITATION FEATURES
    // Meditation Sessions - Private to each user
    match /meditationSessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
    }
    
    // Mood Assessments - Private to each user
    match /moodAssessments/{assessmentId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
    }
    
    // Notifications - Read your own notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.recipientId;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.recipientId;
    }
    
    // Reports - Create only, admins manage
    match /reports/{reportId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.reportedBy;
      allow read, update, delete: if request.auth != null && isAdmin();
    }
    
    // Admin Actions - Admin only logging
    match /adminActions/{actionId} {
      allow create: if request.auth != null && isAdmin();
      allow read: if request.auth != null && isAdmin();
      allow update, delete: if false; // Immutable logs
    }
  }
}